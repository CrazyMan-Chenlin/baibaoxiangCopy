<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--
  - This is the Cocoon web-app configurations file
  -
  - $Id$
  -->
<web-app version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

  <!-- 加载spring容器 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath*:spring/applicationContext-*.xml</param-value>
  </context-param>

  <!-- springmvc前端控制器 -->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等） 如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-serlvet.xml（springmvc-servlet.xml） -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath*:spring/springmvc.xml</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <!-- 第一种：*.action，访问以.action结尾 由DispatcherServlet进行解析
         第二种：/，所以访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析
                 使用此种方式可以实现 RESTful风格的url
        第三种：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时， 仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错。 -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!-- 配置logback -->
  <context-param>
    <param-name>logbackConfigLocation</param-name>
    <param-value>classpath*:/spring/logback.xml</param-value>
  </context-param>
  <!-- post乱码过虑器 -->
  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!--配置错误页面-->
  <error-page>	<!--将错误代码(Error Code)或异常(Exception)的种类对应到web应用资源路径.-->
    <error-code>404</error-code>		<!--HTTP Error code,例如: 404、403-->
    <location>/404.jsp</location>		<!--用来设置发生错误或异常时要显示的页面-->
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/500.jsp</location>
  </error-page>
  <error-page>
    <exception-type>java.lang.Exception</exception-type><!--设置可能会发生的java异常类型,例如:java.lang.Exception-->
    <location>/ExceptionError.html</location>			<!--用来设置发生错误或异常时要显示的页面-->
  </error-page>

  <!--回话超时 单位分钟 -->
  <session-config>
    <session-timeout>60</session-timeout>
  </session-config>





  <!-- Servlet Filters ================================================ -->

  <!--
    - Declare a filter for multipart MIME handling
    -->
  <!--<filter>-->
    <!--<description>Multipart MIME handling filter for Cocoon</description>-->
    <!--<display-name>Cocoon multipart filter</display-name>-->
    <!--<filter-name>CocoonMultipartFilter</filter-name>-->
    <!--<filter-class>org.apache.cocoon.servlet.multipart.MultipartFilter</filter-class>-->
  <!--</filter>-->

  <!--
    - Declare a filter for debugging incoming request
    -->
  <!--<filter>-->
    <!--<description>Log debug information about each request</description>-->
    <!--<display-name>Cocoon debug filter</display-name>-->
    <!--<filter-name>CocoonDebugFilter</filter-name>-->
    <!--<filter-class>org.apache.cocoon.servlet.DebugFilter</filter-class>-->
  <!--</filter>-->

  <!-- Filter mappings ================================================ -->

  <!--
    - Use the Cocoon multipart filter together with the Cocoon demo webapp
    -->
  <!--<filter-mapping>-->
    <!--<filter-name>CocoonMultipartFilter</filter-name>-->
    <!--<servlet-name>Cocoon</servlet-name>-->
  <!--</filter-mapping>-->
  <!--<filter-mapping>-->
    <!--<filter-name>CocoonMultipartFilter</filter-name>-->
    <!--<servlet-name>DispatcherServlet</servlet-name>-->
  <!--</filter-mapping>-->

  <!--
    - Use the Cocoon debug filter together with the Cocoon demo webapp
  <filter-mapping>
    <filter-name>CocoonDebugFilter</filter-name>
    <servlet-name>Cocoon</servlet-name>
  </filter-mapping>
    -->

  <!-- Servlet Context Listener ======================================= -->

  <!--
    - Declare Spring context listener which sets up the Spring Application Context
    - containing all Cocoon components (and user defined beans as well).
    -->
  <!--:spring监听器-->
  <listener>  <!--用来设定Listener接口-->
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--
    - Declare Spring request listener which sets up the required RequestAttributes
    - to support Springs and Cocoon custom bean scopes like the request scope or the
    - session scope.
    -->
  <listener>
    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>

  <!-- Servlet Configuration ========================================== -->

  <!--
    - Servlet that dispatches requests to the Spring managed block servlets
    -->
  <!--<servlet>-->
    <!--<description>Cocoon blocks dispatcher</description>-->
    <!--<display-name>DispatcherServlet</display-name>-->
    <!--<servlet-name>DispatcherServlet</servlet-name>-->
    <!--<servlet-class>org.apache.cocoon.servletservice.DispatcherServlet</servlet-class>-->
    <!--<load-on-startup>1</load-on-startup>-->
  <!--</servlet>-->

  <!-- URL space mappings ============================================= -->

  <!--
    - Cocoon handles all the URL space assigned to the webapp using its sitemap.
    - It is recommended to leave it unchanged. Under some circumstances though
    - (like integration with proprietary webapps or servlets) you might have
    - to change this parameter.
    -->
  <!--<servlet-mapping>-->
    <!--<servlet-name>DispatcherServlet</servlet-name>-->
    <!--<url-pattern>/*</url-pattern>-->
  <!--</servlet-mapping>-->

  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>login.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>

</web-app>
        